# pylint: disable=missing-module-docstring
# pylint: disable=missing-class-docstring
# pylint: disable=missing-function-docstring

import re
import asyncio
from keyboards.client_kb import (
    standard_prod_menu, production_menu, confirm_menu, main_menu,
    carpet_menu
    )
from bot.bot import bot
from aiogram import types, Dispatcher
from aiogram.types import InputMediaPhoto, ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from google_sheet import GoogleSheet
from config_data.config import owner_id, carpet_images_data, carpets_orders

OWNER_ID = owner_id

gs = GoogleSheet()


# Carpet order state
class Standart(StatesGroup):

    carpet_type = State()
    length = State()
    width = State()
    color_quantity = State()
    step_difficult = State()
    user_name = State()
    phone_number = State()
    confirmation = State()


async def start_standart_production(message: types.Message):
    await Standart.carpet_type.set()
    await message.answer(
        "–ë—É–¥—å-–ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫–∏–ª–∏–º–∞:",
        reply_markup=carpet_menu
    )


async def express_media_group(images_list, chat_id, target_bot):
    media = [InputMediaPhoto(media=img_url) for img_url in images_list]
    await target_bot.send_media_group(chat_id=chat_id, media=media)


async def send_design_difficulty(message, state: FSMContext):
    carpet_images = gs.fetch_carpet_images(carpet_images_data)
    simple_images = carpet_images["simple"]
    middle_images = carpet_images["middle"]
    hard_images = carpet_images["hard"]
    design_levels = [
        ("–ü–µ—Ä—à–∏–π —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –¥–∏–∑–∞–π–Ω—Éüëá:", simple_images),
        ("–î—Ä—É–≥–∏–π —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –¥–∏–∑–∞–π–Ω—Éüëá:", middle_images),
        ("–¢—Ä–µ—Ç—ñ–π —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –¥–∏–∑–∞–π–Ω—Éüëá:", hard_images)
    ]

    for title, images in design_levels:
        await asyncio.sleep(1)
        await message.answer(title)
        await asyncio.sleep(3)
        await express_media_group(images, message.chat.id, message.bot)

    await message.answer(
        "–ë—É–¥—å-–ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –í–∞—à–∏—Ö –æ—á—ñ–∫—É–≤–∞–Ω—å –≤—ñ–¥ –¥–∏–∑–∞–π–Ω—É: "
        "–ü–µ—Ä—à–∏–π1Ô∏è‚É£, –¥—Ä—É–≥–∏–π2Ô∏è‚É£ —á–∏ —Ç—Ä–µ—Ç—ñ–π3Ô∏è‚É£."
    )
    current_state = await state.get_state()

    await asyncio.sleep(35)

    if current_state == await state.get_state():
        await message.answer(
            "P.S.\n"
            "–Ø–∫—â–æ –í–∞–º –≤–∞–∂–∫–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏—Å—å, –ø—Ä–æ—Å—Ç–æ –æ–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç, " +
            "—è–∫–∏–π –Ω–∞–π–±—ñ–ª—å—à–µ —Å–ø–æ–±–æ–¥–æ–≤–∞—Å—è —ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è‚ò∫Ô∏è" +
            "\n–ú–∏ –∑ –í–∞–º–∏ –∑–≤'—è–∂–µ–º–æ—Å—è —ñ —É—Å–µ –∑'—è—Å—É—î–º–æüòé"
        )


async def standart_carpet_type(message: types.Message, state: FSMContext):
    await state.update_data(
        carpet_type=message.text,
        production_type="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è")

    carpet_prompt = "–¥—ñ–∞–º–µ—Ç—Ä" if message.text == "–ö—Ä—É–≥–ª–∏–π –∫–∏–ª–∏–º" else "–¥–æ–≤–∂–∏–Ω—É"
    await Standart.length.set()
    await message.answer(
        f"–ë—É–¥—å-–ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å {carpet_prompt} –∫–∏–ª–∏–º–∞ —É —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:",
        reply_markup=standard_prod_menu
    )


async def standart_length(message: types.Message, state: FSMContext):
    try:
        await state.update_data(length=float(message.text))
        if (await state.get_data()).get('carpet_type') == "–ö—Ä—É–≥–ª–∏–π –∫–∏–ª–∏–º":
            await Standart.step_difficult.set()
            await send_design_difficulty(message, state)
        else:
            await Standart.width.set()
            await message.answer(
                "–ë—É–¥—å-–ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —à–∏—Ä–∏–Ω—É –∫–∏–ª–∏–º–∞ —É —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:")
    except ValueError:
        await message.answer("–ë—É–¥—å-–ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –¥–æ–≤–∂–∏–Ω—É —á–∏—Å–ª–æ–º:")


async def standart_width(message: types.Message, state: FSMContext):
    try:
        await state.update_data(width=float(message.text))
        await Standart.step_difficult.set()
        await send_design_difficulty(message, state)
    except ValueError:
        await message.answer("–ë—É–¥—å-–ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —à–∏—Ä–∏–Ω—É —á–∏—Å–ª–æ–º:")


async def standart_step_difficult(message: types.Message, state: FSMContext):
    value = message.text
    if value in ["1", "2", "3", "–ø–µ—Ä—à–∏–π", "–¥—Ä—É–≥–∏–π", "—Ç—Ä–µ—Ç—ñ–π"]:
        await state.update_data(complexity=value)
        await Standart.color_quantity.set()
        await message.answer("–ë—É–¥—å-–ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª—å–æ—Ä—ñ–≤üåà:")
    else:
        await message.answer(
            '–ë—É–¥—å-–ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ —Ç—Ä—å–æ—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:')


async def standart_color_quantity(message: types.Message, state: FSMContext):
    try:
        color_quantity = int(message.text)
        await state.update_data(
            color_quantity=color_quantity)
        await standart_details(message, state)
    except ValueError:
        await message.answer(
            "–ë—É–¥—å-–ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª—å–æ—Ä—ñ–≤ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º:")


async def standart_details(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        text_order_data = f"""
        –¢–µ—Ä–º—ñ–Ω–æ–≤—ñ—Å—Ç—å: {data.get('production_type')}
        –¢–∏–ø –∫–∏–ª–∏–º—É: {data.get('carpet_type')}
        –î–æ–≤–∂–∏–Ω–∞: {data.get('length')} —Å–º
        """
        if data.get("width"):
            text_order_data += f"–®–∏—Ä–∏–Ω–∞: {data.get('width')} —Å–º\n"
        text_order_data += f"""
        –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –¥–∏–∑–∞–π–Ω—É: {data.get('complexity')}
        –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª—å–æ—Ä—ñ–≤: {data.get('color_quantity')}
        """

        await message.answer(f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n{text_order_data}")
        await message.answer("–ë–∞–∂–∞—î—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?", reply_markup=confirm_menu)
        await Standart.confirmation.set()


async def standart_confirmation(message: types.Message, state: FSMContext):
    if message.text == "–°–∫–∞—Å–æ–≤—É—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è":
        await message.answer(
            "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—éü•≤",
            reply_markup=main_menu
        )
        await state.finish()
        return
    if message.text == "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è":
        await Standart.user_name.set()
        await message.answer(
            "–ë—É–¥—å-–ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –í–∞—à–µ —ñ–º'—è:",
            reply_markup=ReplyKeyboardRemove()
            )


async def standart_user_name(message: types.Message, state: FSMContext):
    user_name = message.text
    # check for numbers
    if not re.match(r'^[a-zA-Z–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ“ë“ê\s]+$', user_name):
        await message.answer(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —ñ–º'—è")
        return

    await state.update_data(user_name=user_name)
    await Standart.phone_number.set()
    await message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—Éüì±:",
        reply_markup=ReplyKeyboardRemove())


async def standart_phone_number(message: types.Message, state: FSMContext):
    phone_number = message.text
    if re.match(r'^(\+380\d{9}|38\d{10}|80\d{9}|0\d{9})$', phone_number):
        await state.update_data(phone_number=phone_number)
        await message.answer(
                    "–î—è–∫—É—î–º–æ –∑–∞ —Ç–µ, —â–æ –æ–±—Ä–∞–ª–∏ –Ω–∞—Åüòá "
                    "\n–ú—ã –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –í–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!",
                    reply_markup=main_menu
            )
        async with state.proxy() as data:
            order_number = gs.get_next_order_id(carpets_orders)
            order_details = {
                "–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è": order_number,
                "–Ü–º'—è": data.get('user_name'),
                "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É": data.get('phone_number'),
                "–¢–µ—Ä–º—ñ–Ω–æ–≤—ñ—Å—Ç—å": data.get('production_type'),
                "–¢–∏–ø": data.get('carpet_type'),
                "–î–æ–≤–∂–∏–Ω–∞/ –¥—ñ–∞–º–µ—Ç—Ä": data.get('length'),
                "–®–∏—Ä–∏–Ω–∞": data.get('width'),
                "–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å": data.get('complexity'),
                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª—å–æ—Ä—ñ–≤": data.get('color_quantity'),
            }
            gs.write_order(order_details, carpets_orders)

            # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–µ–∫—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            text_order_data = f"""
            –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_number}
            –¢–µ—Ä–º—ñ–Ω–æ–≤—ñ—Å—Ç—å: {data.get('production_type')}
            –¢–∏–ø –∫–∏–ª–∏–º—É: {data.get('carpet_type')}
            –î–æ–≤–∂–∏–Ω–∞: {data.get('length')} —Å–º
            """
            if data.get("width"):
                text_order_data += f"–®–∏—Ä–∏–Ω–∞: {data.get('width')} —Å–º\n"
            text_order_data += f"""
            –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –¥–∏–∑–∞–π–Ω—É: {data.get('complexity')}
            –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª—å–æ—Ä—ñ–≤: {data.get('color_quantity')}
            –Ü–º'—è: {data.get('user_name')}
            –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone_number')}
            """
            await bot.send_message(message.from_user.id, text_order_data)
            await bot.send_message(OWNER_ID, text_order_data)
            await state.finish()
    else:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"
                             " —É —Ñ–æ—Ä–º–∞—Ç—ñ +380... –∞–±–æ 097..."
                             )

RETURN_MENUS = {
    "Standart:carpet_type": production_menu,
    "Standart:length": carpet_menu,
    "Standart:width": carpet_menu,
    "Standart:color_quantity": carpet_menu,
    "Standart:step_difficult": carpet_menu,
    "Standart:user_name": carpet_menu,
    "Standart:phone_number": carpet_menu,
    "Standart:confirmation": carpet_menu
}


async def standart_return(message: types.Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state is not None:
        menu_to_show = RETURN_MENUS.get(current_state, main_menu)
        if menu_to_show != production_menu:
            await Standart.carpet_type.set()
            await message.answer(
                "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é."
                " –ë–∞–∂–∞—î—Ç–µ –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —Ç–∏–ø –∫–∏–ª–∏–º–∞?",
                reply_markup=menu_to_show
                )
        else:
            await state.reset_state()
            await message.answer(
                "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é.",
                reply_markup=production_menu
                )


async def standart_default_msg(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    print(message.text)
    await message.reply("–ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ –í–∞—ÅüôÑ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


def register_stand_prod_handlers(stand_prod_disp: Dispatcher):
    stand_prod_disp.register_message_handler(
        standart_return,
        text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è",
        state=Standart
    )
    stand_prod_disp.register_message_handler(
        standart_carpet_type,
        state=Standart.carpet_type
        )
    stand_prod_disp.register_message_handler(
        start_standart_production,
        text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è"
    )
    stand_prod_disp.register_message_handler(
        standart_length,
        state=Standart.length
    )
    stand_prod_disp.register_message_handler(
        standart_width,
        state=Standart.width
    )
    stand_prod_disp.register_message_handler(
        standart_color_quantity,
        state=Standart.color_quantity
    )
    stand_prod_disp.register_message_handler(
        standart_step_difficult,
        state=Standart.step_difficult
    )
    stand_prod_disp.register_message_handler(
        standart_user_name,
        state=Standart.user_name
    )
    stand_prod_disp.register_message_handler(
        standart_phone_number,
        state=Standart.phone_number
    )
    stand_prod_disp.register_message_handler(
        standart_confirmation,
        state=Standart.confirmation,
        text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
    )
    stand_prod_disp.register_message_handler(
        standart_confirmation,
        state=Standart.confirmation,
        text="–°–∫–∞—Å–æ–≤—É—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
    )
    stand_prod_disp.register_message_handler(
        standart_default_msg,
        state=Standart,
        content_types=types.ContentTypes.TEXT
    )
