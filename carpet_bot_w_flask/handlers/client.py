# pylint: disable=missing-module-docstring
# pylint: disable=missing-class-docstring
# pylint: disable=missing-function-docstring

import asyncio
from pathlib import Path
from io import BytesIO
from functools import lru_cache
from aiogram import types, Dispatcher
from aiogram.types import InputMediaPhoto
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import NetworkError
from bot import bot
from keyboards.client_kb import (
    main_menu, tools_menu, production_menu, learning_menu,
    about_us_menu, schedule_menu, social_menu, feedbacks_menu,
    delivery_menu, standard_prod_menu, online_menu, master_class,
    express_prod_menu, confirm_menu, carpet_menu, insta_menu,
    tik_tok_menu, you_tube_menu, telegram_menu, milk_needle,
    ukr_poshta, nova_poshta, abroad
    )
from learning.learning import ONLINE_CRS_DESC, MASTER_CLS_DESC
from config_data.config import owner_id

OWNER_ID = owner_id
menu_stack = []

MENU_URLS = {
    'instagram': "https://www.instagram.com/milk_needle/",
    'tik_tok': "https://www.tiktok.com/@milk_needle?_t=8fbamh6zMpy&_r=1",
    'you_tube': "https://www.youtube.com/channel/UCDc1IxtsEnN9uOQ8mUfTNOQ",
    'telegram': "https://t.me/milk_needle",
    'milk_history': "bit.ly/3PmFDMi",
    'location': "https://maps.app.goo.gl/Njvo9sap9aFA4K3m6",
    # 'milk_history': (
    #     "https://shotam.info/nas-nazyvaly-bozhevilnymy-yak-vidkryty-"
    #     "biznes-pid-chas-viyny-i-ne-prohority-istorii-pidpryiemtsiv-"
    #     "iakym-vdalosia/"
    # )
}


async def send_menu(message: types.Message, prompt="–í–∏ –æ–±—Ä–∞–ª–∏‚òùÔ∏è"):
    try:
        if menu_stack:
            await bot.send_message(
                message.from_user.id,
                prompt if prompt else "",
                reply_markup=menu_stack[-1]
            )
        else:
            await bot.send_message(
                message.from_user.id,
                prompt if prompt else "",
                reply_markup=main_menu
            )
    except NetworkError:
        await handle_back(message)


async def command_start(message: types.Message, state: FSMContext):
    await state.finish()  #
    menu_stack.clear()
    menu_stack.append(main_menu)
    welcome_text = "–©–∏—Ä–æ —Ä–∞–¥—ñ –í–∞—Å –≤—ñ—Ç–∞—Ç–∏ ‚ò∫Ô∏è"
    await message.delete()
    await send_menu(message, welcome_text)


async def handle_back(message: types.Message):
    if menu_stack:
        menu_stack.pop()

    if menu_stack:
        await send_menu(message)
    else:
        menu_stack.append(main_menu)
        await send_menu(message, "–í–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é ü§ì")


async def send_callback_request(message: types.Message):
    user = message.from_user
    user_info = f"–Ü–º'—è: {user.first_name}\n"
    if user.last_name:
        user_info += f"–ü—Ä—ñ–∑–≤–∏—â–µ: {user.last_name}\n"
    if user.username:
        user_info += f"–õ–æ–≥—ñ–Ω: @{user.username}\n"
    callback_request = f"–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑—ñ –º–Ω–æ—é:\n\n{user_info}"
    await bot.send_message(OWNER_ID, callback_request)
    await message.answer("–î—è–∫—É—î–º–æ –∑–∞ –í–∞—à –∑–∞–ø–∏—Çüòá\n" +
                         "–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è —Å –í–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!")


# Command handlers
async def tools_command(message: types.Message):
    menu_stack.append(tools_menu)
    await send_menu(message)


async def carpet_command(message: types.Message):
    menu_stack.append(carpet_menu)
    await send_menu(message)


async def production_command(message: types.Message):
    menu_stack.append(production_menu)
    await send_menu(message)


async def order_command(message: types.Message):
    menu_stack.append(confirm_menu)
    await send_menu(message)


async def learning_command(message: types.Message):
    menu_stack.append(learning_menu)
    await send_menu(message)


async def stand_prod_command(message: types.Message):
    menu_stack.append(standard_prod_menu)
    await send_menu(message)


async def express_prod_command(message: types.Message):
    menu_stack.append(express_prod_menu)
    await send_menu(message)


async def exp_prod_command(message: types.Message):
    menu_stack.append(express_prod_menu)
    await send_menu(message)


async def online_command(message: types.Message):
    menu_stack.append(online_menu)
    await send_menu(message)
    await bot.send_message(message.from_user.id, ONLINE_CRS_DESC)

master_feed_path = Path('images/master_images') / 'master_1.jpg'


async def master_command(message: types.Message):
    menu_stack.append(master_class)
    await send_menu(message)
    photo_data = read_image(master_feed_path)
    photo = BytesIO(photo_data)
    await bot.send_photo(chat_id=message.from_user.id, photo=photo)
    await asyncio.sleep(2)
    await bot.send_message(message.from_user.id, MASTER_CLS_DESC)


async def about_us_command(message: types.Message):
    menu_stack.append(about_us_menu)
    await send_menu(message)


async def schedule_command(message: types.Message):
    menu_stack.append(schedule_menu)
    await send_menu(message)
    message_text = """
    –ú–∏ –ø—Ä–∞—Ü—é—î–º–æ üìÖ:\n
    - –ü–æ–Ω–µ–¥—ñ–ª–æ–∫: 10:00‚Äì21:00
    - –í—ñ–≤—Ç–æ—Ä–æ–∫: 10:00‚Äì21:00
    - –°–µ—Ä–µ–¥–∞: 10:00‚Äì21:00
    - –ß–µ—Ç–≤–µ—Ä: 10:00‚Äì21:00
    - –ü º—è—Ç–Ω–∏—Ü—è: 10:00‚Äì21:00
    - –°—É–±–æ—Ç–∞: 10:00‚Äì21:00
    - –ù–µ–¥—ñ–ª—è: 12:00‚Äì18:00
    \n–Ü–Ω–æ–¥—ñ, –π —Ç—Ä–æ—à–∫–∏ –¥–æ–≤—à–µ üòä.\n–ù–µ —Å–æ—Ä–æ–º—Ç–µ—Å—å, –ø–∏—à—ñ—Ç—å ‚úçÔ∏èüí¨.
    """

    await message.answer(message_text, parse_mode='Markdown')
    await asyncio.sleep(1)
    message_text = f"""
    –ê –∑–Ω–∞—Ö–æ–¥–∏–º–æ—Å—å –º–∏ –æ—Å—å —Ç—É—Ç üëá
    <a href="{MENU_URLS['location']}">üìç</a>
    """
    await message.answer(message_text, parse_mode='HTML')


async def social_command(message: types.Message):
    menu_stack.append(social_menu)
    await send_menu(message)


async def instagram(message: types.Message):
    menu_stack.append(insta_menu)
    await send_menu(message)
    url = MENU_URLS['instagram']
    await bot.send_message(
        message.from_user.id,
        f"C–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –Ω–∞–º–∏ –≤ Instagram üì∏üñº\n{url}"
        )


async def tik_tok(message: types.Message):
    menu_stack.append(tik_tok_menu)
    await send_menu(message)
    url = MENU_URLS['tik_tok']
    await bot.send_message(message.from_user.id,
                           f"–ú–∏ –≤ –¢—ñ–∫-–¢–æ–∫ üï∫üíÉ\n\n{url}")


async def you_tube(message: types.Message):
    menu_stack.append(you_tube_menu)
    await send_menu(message)
    url = MENU_URLS['you_tube']
    await bot.send_message(message.from_user.id,
                           f"–ù–∞—à –∫–∞–Ω–∞–ª –Ω–∞ YouTube üì∫üé•\n{url}")


async def telegram(message: types.Message):
    menu_stack.append(telegram_menu)
    await send_menu(message)
    url = url = MENU_URLS['telegram']
    await bot.send_message(message.from_user.id,
                           f"–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—Å –≤ Telegram üì¨üì¢\n{url}")


@lru_cache(maxsize=50)
def read_image(path: Path) -> bytes:
    with path.open('rb') as image:
        return image.read()


async def feedbacks_command(message: types.Message):
    menu_stack.append(feedbacks_menu)
    await send_menu(message)
    feedbacks_path = Path('images/feedback_images')
    images = list(feedbacks_path.glob("*.jpg"))

    grouped_images = [images[i:i + 4] for i in range(0, len(images), 4)]

    for group in grouped_images:
        media_group = []

        for image_path in group:
            image_data = read_image(image_path)
            image_stream = BytesIO(image_data)
            media_group.append(InputMediaPhoto(image_stream))

        await bot.send_media_group(
            chat_id=message.from_user.id, media=media_group)


async def delivery_command(message: types.Message):
    menu_stack.append(delivery_menu)
    await send_menu(message)


async def milk_history(message: types.Message):
    menu_stack.append(milk_needle)
    await send_menu(message)
    url = MENU_URLS['milk_history']
    await bot.send_message(message.from_user.id, url)

new_post_path = Path('images/post_images') / 'new_post.png'


async def novaposhta_handler(message: types.Message):
    photo_data = read_image(new_post_path)
    photo = BytesIO(photo_data)
    await bot.send_photo(chat_id=message.from_user.id, photo=photo)

    menu_stack.append(nova_poshta)
    response_text = (
        "1Ô∏è‚É£ –Ø–∫—â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—Ä–æ–±–ª–µ–Ω–æ –¥–æ 13:00\n"
        "‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ —Ç–æ–π —Å–∞–º–∏–π –¥–µ–Ω—å –¥–æ 21:00\n\n"
        "2Ô∏è‚É£ –ü—ñ—Å–ª—è 13:00 –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å –¥–æ 21:00\n\n"
        "üö´ –ü—ñ—Å–ª—è—Å–ø–ª–∞—Ç–∞ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è - –¢–∫–∞–Ω–∏–Ω–∞ —Ç–∞ –ü—Ä—è–∂–∞ üö´"
    )
    await send_menu(message, response_text)

ukr_post_path = Path('images/post_images') / 'ukr_post.png'


async def ukrposhta_handler(message: types.Message):
    photo_data = read_image(ukr_post_path)
    photo = BytesIO(photo_data)
    await bot.send_photo(chat_id=message.from_user.id, photo=photo)

    menu_stack.append(ukr_poshta)
    response_text = (
        "‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—Ç-—Å–± –¥–æ 17:00\n\n"
        "‚ö†Ô∏è –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—ñ—Å–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å –≤ —Ä–æ–±–æ—á—ñ –¥–Ω—ñ\n\n"
        "üö´ –ü—ñ—Å–ª—è–ø–ª–∞—Ç–∏ –Ω–µ–º–∞—î üö´"
    )
    await send_menu(message, response_text)

inter_post_path = Path('images/post_images') / 'new_post_inter.png'


async def abroad_handler(message: types.Message):
    photo_data = read_image(inter_post_path)
    photo = BytesIO(photo_data)
    await bot.send_photo(chat_id=message.from_user.id, photo=photo)
    menu_stack.append(abroad)
    response_text = (
        "‚úÖ –ù–æ–≤–æ—é –ø–æ—à—Ç–æ—é\n\n"
        "‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ - –¥–æ–¥–∞—Ç–∫–æ–≤–æ —É—Ç–æ—á–Ω—é—î—Ç—å—Å—è\n"
        "‚ö†Ô∏è –°–ø–ª–∞—Ç–∞ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É - –≤—ñ–¥—Ä–∞–∑—É\n\n"
        "üö´ –ü—ñ—Å–ª—è–ø–ª–∞—Ç–∏ –Ω–µ–º–∞—î üö´"
    )
    await send_menu(message, response_text)


async def handle_sticker(message: types.Message):
    sticker_id = message.sticker.file_id
    await message.answer(f"ID —Å—Ç—ñ–∫–µ—Ä–∞: {sticker_id}")


def register_handlers_client(client_disp: Dispatcher):
    # Register command handler for "start" command
    client_disp.register_message_handler(
        command_start, commands=["start"], state="*")

    # Register message handlers for specific texts
    client_disp.register_message_handler(
        tools_command, lambda m: "–ü–æ—Å–ª—É–≥–∏ —Ç–∞ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è" in m.text
    )
    client_disp.register_message_handler(
        production_command, lambda m: "–í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ" in m.text
    )
    client_disp.register_message_handler(
        handle_back, lambda m: "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è" in m.text
    )
    client_disp.register_message_handler(
        learning_command, lambda m: "–ù–∞–≤—á–∞–Ω–Ω—è" in m.text
    )
    client_disp.register_message_handler(
        about_us_command, lambda m: "–ü—Ä–æ –Ω–∞—Å" in m.text
    )
    client_disp.register_message_handler(
        schedule_command, lambda m: "–ù–∞—à–∞ –º–∞–π—Å—Ç–µ—Ä–Ω—è —Ç–∞ —Ä–æ–∑–∫–ª–∞–¥" in m.text
    )
    client_disp.register_message_handler(
        instagram, lambda m: "Instagram" in m.text
    )
    client_disp.register_message_handler(
        tik_tok, lambda m: "Tik-Tok" in m.text
    )
    client_disp.register_message_handler(
        you_tube, lambda m: "YouTube" in m.text
    )
    client_disp.register_message_handler(
        telegram, lambda m: "Telegram" in m.text
    )
    client_disp.register_message_handler(
        milk_history, lambda m: "–Ü—Å—Ç–æ—Ä—ñ—è 'Milk Needle'" in m.text
    )
    client_disp.register_message_handler(
        feedbacks_command, lambda m: "–í—ñ–¥–≥—É–∫–∏" in m.text
    )
    client_disp.register_message_handler(
        social_command, lambda m: "–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ" in m.text
    )
    client_disp.register_message_handler(
        delivery_command, lambda m: "–î–æ—Å—Ç–∞–≤–∫–∞" in m.text
    )
    client_disp.register_message_handler(
        ukrposhta_handler, lambda m: "–£–∫—Ä–ø–æ—à—Ç–∞" in m.text
    )
    client_disp.register_message_handler(
        novaposhta_handler, lambda m: "–ù–æ–≤–∞ –ø–æ—à—Ç–∞" in m.text
    )
    client_disp.register_message_handler(
        abroad_handler, lambda m: "–ó–∞ –∫–æ—Ä–¥–æ–Ω" in m.text
    )
    client_disp.register_message_handler(
        order_command, lambda m: "–í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?" in m.text
        )
    # sticker handler
    client_disp.register_message_handler(
        handle_sticker, content_types=['sticker']
    )
    client_disp.register_message_handler(
        online_command, lambda m: "–û–Ω–ª–∞–π–Ω –∫—É—Ä—Å" in m.text
    )
    client_disp.register_message_handler(
        master_command, lambda m: "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å" in m.text
    )
    client_disp.register_message_handler(
        send_callback_request, commands=["callback"], state="*"
    )
