# pylint: disable=missing-module-docstring
# pylint: disable=missing-class-docstring
# pylint: disable=missing-function-docstring
import asyncio
from datetime import datetime
from collections import defaultdict
from aiogram.utils.exceptions import (
    BotBlocked, ChatNotFound, RetryAfter)
from aiogram import types, Dispatcher
from aiogram.dispatcher.middlewares import BaseMiddleware
from keyboards import main_menu

# –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —á–∞—Å—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
last_activity = {}  # {user_id: {'time': datetime, 'message': message.text}}
ignored_users = {}
MAX_SEND_ATTEMPTS = 3  # 3 —Å–ø—Ä–æ–±–∏
send_attempts = defaultdict(int)  # –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —é–∑–µ—Ä–∞


class UserActivityMiddleware(BaseMiddleware):
    async def on_pre_process_message(self, message: types.Message, data: dict):
        user_id = message.from_user.id

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤—ñ–¥–º—ñ–Ω–Ω—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if user_id in ignored_users and ignored_users[user_id] != message.text:
            ignored_users.pop(user_id, None)  # –ü—Ä–∏–±—Ä–∞—Ç–∏ –∑ —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏—Ö

        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Å–ø–∏—Å–∫—É —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏—Ö, —ñ–≥–Ω–æ—Ä—É—î–º–æ –π–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        elif user_id in ignored_users:
            return

        # –í–∏–∫–ª—é—á–∞—î–º–æ –≤—ñ—Ç–∞—é—á—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if message.text != "–©–∏—Ä–æ —Ä–∞–¥—ñ –≤–∞—Å –≤—ñ—Ç–∞—Ç–∏‚ò∫Ô∏è":
            last_activity[user_id] = (
                {'time': datetime.now(), 'message': message.text})


async def check_user_activity(dispatcher: Dispatcher):
    bot = dispatcher.bot
    storage = dispatcher.storage
    while True:
        await asyncio.sleep(1800)
        now = datetime.now()
        for user_id, data in list(last_activity.items()):
            if (now - data['time']).seconds >= 1800:
                if send_attempts[user_id] >= MAX_SEND_ATTEMPTS:
                    # –Ø–∫—â–æ –º–∏ –¥–æ—Å—è–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ø—Ä–æ–±, –≤–∏–¥–∞–ª—è—î–º–æ
                    last_activity.pop(user_id, None)
                    send_attempts.pop(user_id, None)
                    continue

                user_data = await storage.get_data(user=user_id)
                if user_data:
                    await storage.finish(user=user_id)

                try:
                    await bot.send_message(
                        user_id,
                        "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é üò¥",
                        reply_markup=main_menu
                    )
                except (TimeoutError,
                        BotBlocked,
                        ChatNotFound,
                        RetryAfter):
                    send_attempts[user_id] += 1
                    continue

                ignored_users[user_id] = data['message']
                last_activity.pop(user_id, None)


async def register_activity_tracker(timer_disp):
    timer_disp.middleware.setup(UserActivityMiddleware())
    asyncio.ensure_future(check_user_activity(timer_disp))
